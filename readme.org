#+TITLE: EMAX

* Description
  This is a repository to hold the configuration I use for [[https://www.gnu.org/software/emacs/][emacs]]. This configuration sets up emacs to be used as my
  primary IDE, Rest Client, Notes System, Jira Interface, and Document Editor. Below I will specify how I accomplish
  each of these tasks. Feel free to use this configuration if you feel it is helpful. However, it is aimed at solving
  the needs that I come across.

  The environment that I find primarily find myself in is doing [[https://dotnet.microsoft.com/en-us/][dotnet]] development on a Windows machine. Because of
  this, my configuration is geared toward this scenario. However, I am using [[https://microsoft.github.io/language-server-protocol/][LSP]] whenever possible for IDE features.
  This means that, while I am focused more on dotnet, this configuration will work for any programming language that
  has an [[https://emacs-lsp.github.io/lsp-mode/page/languages/][accessible Language Server]].

  The Windows OS may be a bigger difference though. Being a dotnet (prior to core) developer, I have historically
  needed to be on a Windows machine. Because of that restriction, I have setup many things that work for Windows. I
  configure my Windows machine to run [[https://en.wikipedia.org/wiki/Bash_(Unix_shell)][Bash]] and all of my pathing is expecting as much. This means that, in theory,
  the configuration should work on a Unix machine. However, Some of the configuration is specifically to allow some
  things to work on Windows. Feel free to try the configuration on a Unix machine, but it should be noted that some
  issues may be found.

* Configuration
** General
*** Philosophy
    Create a transparent and consistent text editing environment
    
**** Transparency
     One of the things I disliked about many of the configurations for emacs was that it was difficult to know what
     packages I had pulled in, and what purpose each part of the configuration served. So, when creating this
     configuration, I aimed to create a config that was as transparent as possible. Both in terms of the packages
     that I have installed and for the custom code/configuration that I have setup.

***** Package Manager
      To aid in the transparency of packages that are installed, I created a [[file:custom/package-manager/][custom pacakage manager]]. This 'package
      manage' aims to only keep a record of all the packages that are installed. This record exists in the [[file:custom/package-manager/packages.db][packages.db]]
      file. This file contains all of the packages that are used for this configuration. The [[file:custom/package-manager/package-manager.el][package-manager.el]] will
      simply iterate over this file and ensure that all of the mentioned packages are installed.

      To download packages I am using [[https://github.com/raxod502/straight.el#getting-started][straight]]. This mostly arose as a way to work around being on VPNs that don't
      allow me to connect to other package repositories. I have not yet found any VPN that doesn't allow me to
      access GitHub (or whatever server is used by the packages I currently have installed). Because of this restriction,
      every package that I pull in is done via straight.

***** Clean Init.el
      I am a developer by trade and one of my pet peeves is cluttered files. Many of the configurations that I see for
      emacs have every (or almost everything) shoved into their [[file:init.el][init.el]] file. I couldn't stand doing this when I was
      using other configuration.

      To solve this problem I created separate files that can be loaded in from the init file. At first this caused my
      startup time to be rather slow, but I was eventually able to solve that problem a combination or compiling the
      files and preemptively launching an emacs server. I will explain more about each of these later on, but wanted to
      mention them as well.

***** "custom" dir
      To help keep files organized and focused, I have all of the custom code located underneath the [[file:custom/][custom]] directory.
      Underneath that directory are several more directories that allow for further categorization of the code files.
      For the most part, that is as far as the structure goes. There are a few exceptions, however, I am aiming to clean
      them up with a bit more thought and effort.

****  Consistency
     The other issue that I found myself butting up against with other configurations was consistency (mostly regarding
     key-bindings). Emacs has [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][key binding conventions]], and I wanted to ensure that my configuration followed this
     convention when possible. I realize that many people will likely prefer to follow some other convention. Simply
     put, that isn't what I set out to do, or prefer.

*** Performance
    As mentioned above, the extra files do cause some start-up performance issues. To help to mitigate this, I created
    some functions (defined in the init due to the need of them before loading any files) that will check for compiled
    versions of the custom files. If there is not a compiled file found with a modified time stamp later than its '.el'
    counterpart, than the file is compiled. The first time this is performed there is some additional overhead in
    compiling the files. However, after the initial start-up the files are loaded much quicker reducing the overall wait
    time.

    If that reduction in start-up time is still too little, You may be interested in the later section that details
    launching a server on system (Windows) start-up. This does not actually reduce the start-up time, but instead has
    all of the start-up time happening silently in the background. From there you can launch clients instantly that talk
    to the already started server.
      
     
* Things for Server User
** Make sure that you setup the %HOME% variable
*** Use the scripts inside tools/windows
*** Windows Task
**** Create a task in the Task Schedule to be triggered on log on
**** that task should execute the .vbs file
*** Launchy
**** Create a shortcut to the launch-client.bat
**** Update icon if you want
**** Rescan Collection

* Other installs
- pip
  - autopep8
  - flake8
  - jedi
- Language Server Protocol (LSP)
| Language | Command                                                  |
|----------+----------------------------------------------------------|
| Python   | pip install 'python-language-server[all]'                |
| Bash     | npm i -g bash-language-server                            |
| HTML     | npm i -g vscode-html-languageserver-bin                  |
| CSS      | npm i -g vscode-css-languageserver-bin                   |
| JS/TS    | npm i -g typescript-language-server; npm i -g typescript |
